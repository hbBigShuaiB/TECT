#!/usr/bin/env python
import argparse
import sys
import os

from numpy import float32

sys.path.append(os.path.join(os.path.split(sys.argv[0])[0], '../'))

from TECT.cluster import Cluster


def get_parser():
    desc = 'Clustering the single-cell sequencing results.'
    exmp = 'Example: TECT_clust -te count.txt -idx xxx/outs/filtered_feature_bc_matrix/'
    parser = argparse.ArgumentParser(prog='TECT', description=desc, epilog=exmp)

    optional = parser._action_groups.pop()

    optional.add_argument('-o', '--output', type=str, default='results/',
                          help='Prefix path of the output file.')

    optional.add_argument('-maxG','--maxGene',type=int,default=7000,
                            help='Maximum number of genes expressed required for a cell to pass filtering.')

    optional.add_argument('-maxC','--maxCount',type=int,default=60000,
                            help='Maximum number of counts required for a cell to pass filtering.')

    optional.add_argument('-mtp','--mtPercent',type=int,default=50,
                            help='Upper limit of mitochondrial content.')


    optional.add_argument('-topG','--topGene',type=int,default=4000,
                            help='Number of highly-variable genes to keep.')

    optional.add_argument('-gR','--geneResolution',type=float,default=0.1,
                            help='Resolution of Leiden in gene clust.')

    optional.add_argument('-teR','--teResolution',type=float,default=0.15,
                            help='Resolution of Leiden in te clust.')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-te', '--TEMatrix', type=str,required=True,
                        help='Please input the TE count matrix file.')

    required.add_argument('-gene', '--geneMatrix',type=str,required=True,
                        help='the path of gene count matrix file.')



    # required.add_argument('-idx', '--index', type=str, required=True,
    #                       help='Give the path of index file.')
    # required.add_argument('-o', '--output', type=str, default='./',
    #                       help='Prefix path of the output file.')

    parser._action_groups.append(optional)
    optional = parser.add_argument_group('optional arguments')

    return parser


def main():
    args = get_parser().parse_args()
    cluster = Cluster(args.TEMatrix, args.geneMatrix,args.output,args.maxCount,args.maxGene,args.mtPercent,args.topGene,
                    args.geneResolution,args.teResolution)
    


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt!\n")
        sys.exit(0)
