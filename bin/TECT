#!/usr/bin/env python
import argparse
import sys
import os

sys.path.append(os.path.join(os.path.split(sys.argv[0])[0], '../'))

from TECT.counter import Counter
from datetime import datetime


def get_parser():
    desc = 'Get the expression of TE from single cell RNA sequencing data.'
    exmp = 'Example: TECT -i xxx.bam -idx human.index/index.idx -CB CB -blist xxx/outs/filtered_feature_bc_matrix/barcodes.tsv.gz -o result'
    parser = argparse.ArgumentParser(prog='TECT', description=desc, epilog=exmp)

    optional = parser._action_groups.pop()

    optional.add_argument('-CB', '--cellBarcode', type=str, default='CB', choices=['CB', 'CR', 'None'],
                          help='Location of barcodes. CB for cell ranger, CR for STAR. '
                               'If they were seperated cell files from Smart-seq, select "None".')
    optional.add_argument('-mp', '--matchPercent', type=float, default=0.75,
                          help='Matching threshold setting of reads.'
                               'The higher the value, the more accurate. Default is 0.75.')
    optional.add_argument('-temq', '--TEMappingQuality', type=int, default=0,
                          help='Threshold of mapping quality of TEs. Usually, TE reads have lower mapping quality.')
    optional.add_argument('-exonmq', '--exonMappingQuality', type=int, default=15,
                          help='Threshold of mapping quality of reads on exon.')

    optional.add_argument('-blist', '--barcodeList', type=str, default='',
                          help='Contain the list of filtered barcodes.')

    required = parser.add_argument_group('required arguments')

    required.add_argument('-i', '--input', type=str, nargs='+', required=True,
                          help='Please input the aligned file.')
    required.add_argument('-idx', '--index', type=str, required=True,
                          help='Give the path of index file.')
    required.add_argument('-o', '--output', type=str, default='./',
                          help='Prefix path of the output file.')

    parser._action_groups.append(optional)
    optional = parser.add_argument_group('optional arguments')

    return parser


def main():
    args = get_parser().parse_args()

    counter = Counter(args.index, args.output)
    if args.barcodeList!='':
        counter.get_filtered_barcodes(args.barcodeList)

    if args.cellBarcode == 'None':
        counter.new_matrix('all')
        files = args.input
        for file in files:
            counter.get_repeat_num(file, args.matchPercent, args.TEMappingQuality, args.exonMappingQuality)

    else:
        files = args.input
        for file in files:
            counter.get_repeat_num_10x_bc_sorted(file, args.matchPercent, args.TEMappingQuality, args.exonMappingQuality,
                                             args.cellBarcode)
    end_time=datetime.now()
    print('')
    print('[%s] End of the TECT_count module.'%(end_time.strftime('%Y-%m-%d %H:%M:%S')))


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        sys.stderr.write("User interrupt !\n")
        sys.exit(0)
